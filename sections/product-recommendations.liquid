

<div class="related container">
  <div class="width">
    <h2>{{ section.settings.heading }}</h2>

    <div class="related-products row">
    </div>
    
  </div>
</div>

<script>
 // money format based these methods: https://gist.github.com/stewartknapman/8d8733ea58d2314c373e94114472d44c
  function formatMoney(cents, format) {
    if (typeof cents == 'string') { cents = cents.replace('.',''); }
    var value = '';
    var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
    var formatString = (format || this.money_format);

    function defaultOption(opt, def) {
      return (typeof opt == 'undefined' ? def : opt);
    }

    function formatWithDelimiters(number, precision, thousands, decimal) {
      precision = defaultOption(precision, 2);
      thousands = defaultOption(thousands, ',');
      decimal   = defaultOption(decimal, '.');

      if (isNaN(number) || number == null) { return 0; }

      number = (number/100.0).toFixed(precision);

      var parts   = number.split('.'),
          dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
          cents   = parts[1] ? (decimal + parts[1]) : '';

      return dollars + cents;
    }

    switch(formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }

    return formatString.replace(placeholderRegex, value);
  };


function buildBlock(product) {
  const formattedPrice = formatMoney(product.price, "{{ shop.money_format }}")

  const html = `

  <article class="col-6 col-sm-3 g-2">


                <a href=" ${product.url} "> <div class="background-effect mb-2">
                  <img
                    class="main collection-page-img"
                    src=" ${product.images[0]}"
                    alt=" ${product.images[0].alt} ">
                
                    <img
                      class="secondary collection-page-img"
                      src="${product.images[1]}"
                      alt="${product.images[1].alt}">
            
                </div>
              



                <h3 class="px-2 product-title"> ${product.title}</h3>
                </a>
                
                <div class="product-content p-2">

                <div class="collection-page__brand mb-2 ">
                 
                       ${product.vendor} <span> | </span>
                   
                     <a href="https://eridonna.myshopify.com/collections/${product.type }"> ${product.type}</a>
                   </div>
               
                <div class="flex justify-content-between collection-page__money align-items-end">
                 
        
                  <p class="price"> ${formattedPrice}</p>
                </div>
              </div>

            </article>
         
  `

  return html
}

fetch('/recommendations/products.json?product_id={{ product.id }}&limit=4')
  .then(response => response.json())
  .then(({ products }) => {
    console.log(products)
    products.forEach(product => {
      const html = buildBlock(product)
      document.querySelector('.related-products').innerHTML += html
    })
  }
);
</script>

{% schema %}
  {
    "name": "Related products",
    "settings": [
      {
        "type": "text",
        "label": "Heading",
        "id": "heading",
        "default": "You may also like"
      }
    ],
    "presets": [
      {
        "name": "Related products"
      }
    ]
  }
  {% endschema %}